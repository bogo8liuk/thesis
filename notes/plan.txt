INTRODUZIONE

<introduzione al problema, ovvero: sviluppo di un compilatore per un linguaggio di programmazione funzionale sperimentale
in cui vengono accorpate varie caratteristiche di linguaggi preesistenti>

<ispirazione ad haskell come linguaggio da cui prendere spunto>

SVILUPPO

<presentazione del linguaggio>

<presentazione struttura del compilatore: parser, check nomi, etc.>

<strutture dati dell'ast, vari passaggi che fa>

<due parole sul parser, tra cui anche le categorie degli operatori (magari fai vedere l'algoritmo utilizzato...)>

<spiegare a che scopo vengono fatti i vari check, ad esempio degli argomenti per gli alias..., quindi, in sostanza, entrare
nel dettaglio dei vari check>

<prima fase di desugaring: alias, signatures>

<spiegazione dei constraints, quindi check dei constraints>

<kind-inference, presentazione dell'algoritmo, delle strutture dati utilizzate e della gestione delle kind variables>

<fase di costruzione di vari token come costruttori (data cons), constraints, istanze>

<type inference: presentazione di hindley-milner>
<estensione di hm con i predicati>
<dispatch statico dei simboli>

SVILUPPI FUTURI

<polymorphic variants>

<tipi lineari>

<effetti>

CONCLUSIONI

<disclaimer>